// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: organization.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createOrganization = `-- name: CreateOrganization :one
INSERT INTO
organizations (
    name
) VALUES ( 
    $1
) RETURNING id, name
`

func (q *Queries) CreateOrganization(ctx context.Context, name string) (Organization, error) {
	row := q.db.QueryRow(ctx, createOrganization, name)
	var i Organization
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getOrganizationByID = `-- name: GetOrganizationByID :one
SELECT
    id, name
FROM
    organizations
WHERE
    id=$1
`

func (q *Queries) GetOrganizationByID(ctx context.Context, id uuid.UUID) (Organization, error) {
	row := q.db.QueryRow(ctx, getOrganizationByID, id)
	var i Organization
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getOrganizationIDFromRegistrationToken = `-- name: GetOrganizationIDFromRegistrationToken :one
SELECT
    organization_id
FROM
    registration_tokens
WHERE
    id=$1
`

func (q *Queries) GetOrganizationIDFromRegistrationToken(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getOrganizationIDFromRegistrationToken, id)
	var organization_id uuid.UUID
	err := row.Scan(&organization_id)
	return organization_id, err
}

const getOrganizationSummaries = `-- name: GetOrganizationSummaries :many
SELECT
  o.id, o.name,
  COUNT(n.id) AS node_count
FROM organizations o
LEFT JOIN nodes n ON n.organization_id = o.id
GROUP BY o.id ORDER BY o.name ASC
`

type GetOrganizationSummariesRow struct {
	ID        uuid.UUID `db:"id" json:"id"`
	Name      string    `db:"name" json:"name"`
	NodeCount int64     `db:"node_count" json:"node_count"`
}

func (q *Queries) GetOrganizationSummaries(ctx context.Context) ([]GetOrganizationSummariesRow, error) {
	rows, err := q.db.Query(ctx, getOrganizationSummaries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrganizationSummariesRow
	for rows.Next() {
		var i GetOrganizationSummariesRow
		if err := rows.Scan(&i.ID, &i.Name, &i.NodeCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrganizations = `-- name: GetOrganizations :many
SELECT
    id, name
FROM
    organizations
ORDER BY name ASC
`

func (q *Queries) GetOrganizations(ctx context.Context) ([]Organization, error) {
	rows, err := q.db.Query(ctx, getOrganizations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getValidRegistrationToken = `-- name: GetValidRegistrationToken :one
SELECT
    organization_id
FROM
    registration_tokens
WHERE
    id=$1 AND (expires_at IS NULL OR expires_at > CURRENT_TIMESTAMP)
`

func (q *Queries) GetValidRegistrationToken(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getValidRegistrationToken, id)
	var organization_id uuid.UUID
	err := row.Scan(&organization_id)
	return organization_id, err
}
