// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: get.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllOrganizations = `-- name: GetAllOrganizations :many
SELECT id, name FROM organizations
`

func (q *Queries) GetAllOrganizations(ctx context.Context) ([]Organization, error) {
	rows, err := q.db.Query(ctx, getAllOrganizations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNodeByID = `-- name: GetNodeByID :one
SELECT id, organization_id, public_key, label, hostname, client_version, pending_sources, pending_schedule, os_kernel, os_name, os_major, os_minor, os_build, connected_on, approved_on, last_seen, approved FROM nodes WHERE id=$1
`

func (q *Queries) GetNodeByID(ctx context.Context, id pgtype.UUID) (Node, error) {
	row := q.db.QueryRow(ctx, getNodeByID, id)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PublicKey,
		&i.Label,
		&i.Hostname,
		&i.ClientVersion,
		&i.PendingSources,
		&i.PendingSchedule,
		&i.OsKernel,
		&i.OsName,
		&i.OsMajor,
		&i.OsMinor,
		&i.OsBuild,
		&i.ConnectedOn,
		&i.ApprovedOn,
		&i.LastSeen,
		&i.Approved,
	)
	return i, err
}
