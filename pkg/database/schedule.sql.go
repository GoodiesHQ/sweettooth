// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: schedule.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getNodeSchedules = `-- name: GetNodeSchedules :many
WITH node_schedules AS (
    SELECT 
        ns.schedule_id,
        s.name,
        s.days,
        s.start_time,
        s.finish_time
    FROM 
        node_schedule_assignments ns
    JOIN 
        schedules s ON ns.schedule_id = s.id
    WHERE 
        ns.node_id = $1
), group_schedules AS (
    SELECT 
        gs.schedule_id,
        s.name,
        s.days,
        s.start_time,
        s.finish_time
    FROM 
        node_group_assignments nga
    JOIN 
        group_schedule_assignments gs ON nga.group_id = gs.group_id
    JOIN 
        schedules s ON gs.schedule_id = s.id
    WHERE 
        nga.node_id = $1
)
SELECT DISTINCT
    schedule_id, name, days, start_time, finish_time
FROM 
    node_schedules
UNION
SELECT DISTINCT
    schedule_id, name, days, start_time, finish_time
FROM 
    group_schedules
`

type GetNodeSchedulesRow struct {
	ScheduleID int32
	Name       string
	Days       string
	StartTime  pgtype.Time
	FinishTime pgtype.Time
}

// Get a list of all schedules that apply to an node
func (q *Queries) GetNodeSchedules(ctx context.Context, nodeID pgtype.UUID) ([]GetNodeSchedulesRow, error) {
	rows, err := q.db.Query(ctx, getNodeSchedules, nodeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetNodeSchedulesRow
	for rows.Next() {
		var i GetNodeSchedulesRow
		if err := rows.Scan(
			&i.ScheduleID,
			&i.Name,
			&i.Days,
			&i.StartTime,
			&i.FinishTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
